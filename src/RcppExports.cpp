// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cpp_rowSums_modN
NumericVector Cpp_rowSums_modN(NumericVector x, int N);
RcppExport SEXP _SVDNF_Cpp_rowSums_modN(SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_rowSums_modN(x, N));
    return rcpp_result_gen;
END_RCPP
}
// Cpp_prodfun
NumericVector Cpp_prodfun(NumericVector probs, NumericVector filter);
RcppExport SEXP _SVDNF_Cpp_prodfun(SEXP probsSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_prodfun(probs, filter));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_cpp_prod
NumericMatrix dnorm_cpp_prod(NumericVector rets, NumericVector mu, NumericVector sig, NumericVector p);
RcppExport SEXP _SVDNF_dnorm_cpp_prod(SEXP retsSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rets(retsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp_prod(rets, mu, sig, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVDNF_Cpp_rowSums_modN", (DL_FUNC) &_SVDNF_Cpp_rowSums_modN, 2},
    {"_SVDNF_Cpp_prodfun", (DL_FUNC) &_SVDNF_Cpp_prodfun, 2},
    {"_SVDNF_dnorm_cpp_prod", (DL_FUNC) &_SVDNF_dnorm_cpp_prod, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVDNF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
